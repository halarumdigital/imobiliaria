import OpenAI from "openai";
import { getStorage } from "../storage";

// the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user

export interface MessageContext {
  phone: string;
  message: string;
  instanceId: string;
  conversationHistory?: Array<{
    role: 'user' | 'assistant';
    content: string;
  }>;
}

export interface AgentResponse {
  response: string;
  shouldDelegate?: boolean;
  delegatedAgentId?: string;
}

export class AIService {
  async processMessage(context: MessageContext): Promise<AgentResponse | null> {
    try {
      console.log(`üöÄ AIService.processMessage called for instance: ${context.instanceId}`);
      const storage = getStorage();
      
      // Buscar todas as inst√¢ncias para encontrar a correta por evolutionInstanceId
      let instance = null;
      
      // Como n√£o temos m√©todo direto, vamos buscar em todas as empresas
      const companies = await storage.getAllCompanies();
      console.log(`üîç Found ${companies.length} companies to search`);
      
      for (const company of companies) {
        const instances = await storage.getWhatsappInstancesByCompany(company.id);
        console.log(`üè¢ Company ${company.name} has ${instances.length} instances`);
        
        // Debug: Mostrar todas as inst√¢ncias
        instances.forEach(i => {
          console.log(`üîç Instance details: name=${i.name}, evolutionId=${i.evolutionInstanceId}, agentId=${i.aiAgentId}`);
        });
        
        // Buscar por evolutionInstanceId OU por nome (fallback)
        let found = instances.find(i => i.evolutionInstanceId === context.instanceId);
        
        // Se n√£o encontrou por evolutionInstanceId, usar FALLBACK UNIVERSAL
        if (!found) {
          console.log(`üîÑ FALLBACK ATIVADO: N√£o encontrou ${context.instanceId}, tentando fallback...`);
          
          // Para o ID espec√≠fico do webhook, mapear para deploy2
          if (context.instanceId === "e5b71c35-276b-417e-a1c3-267f904b2b98") {
            found = instances.find(i => i.name === "deploy2");
            console.log(`üéØ FALLBACK ESPEC√çFICO: Mapeando ${context.instanceId} -> deploy2`);
          }
          
          // Se ainda n√£o encontrou, pegar a primeira inst√¢ncia com agente vinculado
          if (!found) {
            found = instances.find(i => i.aiAgentId);
            console.log(`üÜò FALLBACK GEN√âRICO: Usando primeira inst√¢ncia com agente: ${found?.name}`);
          }
        }
        
        if (found) {
          instance = found;
          console.log(`‚úÖ Found matching instance: ${found.name}, Agent ID: ${found.aiAgentId}`);
          break;
        } else {
          console.log(`‚ùå No instance found with evolutionInstanceId: ${context.instanceId}`);
        }
      }
      
      if (!instance || !instance.aiAgentId) {
        console.log(`‚ùå No agent linked to instance ${context.instanceId}. Instance found: ${!!instance}, Agent ID: ${instance?.aiAgentId}`);
        return null;
      }

      // Buscar o agente principal
      console.log(`üîç Looking for agent with ID: ${instance.aiAgentId}`);
      const mainAgent = await storage.getAiAgent(instance.aiAgentId);
      if (!mainAgent) {
        console.log(`‚ùå Agent ${instance.aiAgentId} not found`);
        return null;
      }
      console.log(`‚úÖ Agent found: ${mainAgent.name}`);

      // Verificar se deve delegar para um agente secund√°rio
      console.log(`üîç Verificando delega√ß√£o para agente principal: ${mainAgent.name}`);
      const delegatedAgent = await this.checkDelegation(mainAgent, context.message);
      const activeAgent = delegatedAgent || mainAgent;
      
      if (delegatedAgent) {
        console.log(`üîÑ DELEGA√á√ÉO ATIVADA! Mudando de "${mainAgent.name}" para "${delegatedAgent.name}"`);
      } else {
        console.log(`üìã Sem delega√ß√£o. Usando agente principal: ${mainAgent.name}`);
      }

      // Buscar configura√ß√£o global de IA (n√≠vel administrador)
      const aiConfig = await storage.getAiConfiguration();
      console.log(`üîç DEBUG: AI Config retrieved:`, aiConfig);
      if (!aiConfig) {
        console.log(`‚ùå Global AI config not found`);
        return null;
      }
      
      if (!aiConfig.apiKey) {
        console.log(`‚ùå AI Config exists but apiKey is missing:`, aiConfig);
        return null;
      }
      
      console.log(`‚úÖ AI Config found with apiKey: ${aiConfig.apiKey ? 'YES' : 'NO'}`);
      console.log(`üîß AI Config details:`, {
        temperatura: aiConfig.temperatura,
        temperaturaType: typeof aiConfig.temperatura,
        numeroTokens: aiConfig.numeroTokens,
        numeroTokensType: typeof aiConfig.numeroTokens,
        modelo: aiConfig.modelo
      });
      console.log(`‚úÖ Agent found: ${mainAgent.name}, ID: ${mainAgent.id}`);

      // Buscar hist√≥rico da conversa ANTES de gerar resposta
      console.log(`üìö [DEBUG] Carregando hist√≥rico da conversa para ${context.phone}...`);
      console.log(`üìö [DEBUG] InstanceId recebido: ${context.instanceId}`);
      
      let conversationHistory = [];
      try {
        conversationHistory = await this.getConversationHistory(context.instanceId, context.phone);
        console.log(`üìö [DEBUG] Hist√≥rico carregado com SUCESSO: ${conversationHistory.length} mensagens`);
        
        if (conversationHistory.length > 0) {
          console.log(`üìö [DEBUG] √öltimas mensagens do hist√≥rico:`, conversationHistory.slice(-3));
        }
      } catch (error) {
        console.error(`‚ùå [DEBUG] Erro ao carregar hist√≥rico:`, error);
        conversationHistory = [];
      }
      
      const contextWithHistory = {
        ...context,
        conversationHistory
      };
      
      console.log(`üìö [DEBUG] Context com hist√≥rico preparado - Total mensagens: ${conversationHistory.length}`);
      
      // Gerar resposta usando OpenAI
      console.log(`ü§ñ Gerando resposta com agente ativo: ${activeAgent.name} (Tipo: ${activeAgent.agentType || 'main'})`);
      const response = await this.generateResponse(activeAgent, contextWithHistory, aiConfig);

      return {
        response,
        shouldDelegate: !!delegatedAgent,
        delegatedAgentId: delegatedAgent?.id
      };

    } catch (error) {
      console.error("Error processing message:", error);
      return null;
    }
  }

  private async getConversationHistory(evolutionInstanceId: string, phone: string): Promise<Array<{role: 'user' | 'assistant', content: string}>> {
    try {
      console.log(`üìö [HISTORY] Iniciando busca de hist√≥rico para evolutionId: ${evolutionInstanceId}, phone: ${phone}`);
      const storage = getStorage();
      
      // PRIMEIRO: Encontrar a inst√¢ncia do nosso banco usando o evolutionInstanceId
      console.log(`üìö [HISTORY] Buscando inst√¢ncia do banco...`);
      const dbInstanceId = await this.findDatabaseInstanceId(evolutionInstanceId);
      if (!dbInstanceId) {
        console.log(`‚ùå [HISTORY] Inst√¢ncia do banco n√£o encontrada para evolutionId: ${evolutionInstanceId}`);
        return [];
      }
      
      console.log(`‚úÖ [HISTORY] Inst√¢ncia do banco encontrada: ${dbInstanceId} (evolutionId: ${evolutionInstanceId})`);
      
      // Buscar conversa existente usando o ID correto do banco
      console.log(`üìö [HISTORY] Buscando conversas na inst√¢ncia ${dbInstanceId}...`);
      const conversations = await storage.getConversationsByInstance(dbInstanceId);
      console.log(`üìö [HISTORY] Total de conversas encontradas: ${conversations.length}`);
      
      const conversation = conversations.find(c => c.contactPhone === phone);
      
      if (!conversation) {
        console.log(`‚ùå [HISTORY] Nenhuma conversa encontrada para ${phone} na inst√¢ncia ${dbInstanceId}`);
        console.log(`üìö [HISTORY] Conversas dispon√≠veis:`, conversations.map(c => ({ id: c.id, phone: c.contactPhone })));
        return [];
      }
      
      console.log(`‚úÖ [HISTORY] Conversa encontrada: ${conversation.id} para telefone ${phone}`);
      
      // Buscar mensagens da conversa
      console.log(`üìö [HISTORY] Buscando mensagens da conversa ${conversation.id}...`);
      const messages = await storage.getMessagesByConversation(conversation.id);
      console.log(`üìö [HISTORY] Encontradas ${messages.length} mensagens na conversa`);
      
      if (messages.length > 0) {
        console.log(`üìö [HISTORY] Primeiras mensagens:`, messages.slice(0, 3).map(m => ({ sender: m.sender, content: m.content.substring(0, 50) + '...' })));
      }
      
      // Converter para formato OpenAI (√∫ltimas 10 mensagens para n√£o sobrecarregar)
      const history = messages
        .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())
        .slice(-10)
        .map(msg => ({
          role: msg.sender === 'user' ? 'user' as const : 'assistant' as const,
          content: msg.content
        }));
      
      console.log(`‚úÖ [HISTORY] Hist√≥rico formatado com SUCESSO: ${history.length} mensagens`);
      if (history.length > 0) {
        console.log(`üìö [HISTORY] Hist√≥rico formatado:`, history);
      }
      
      return history;
      
    } catch (error) {
      console.error("‚ùå [HISTORY] Erro ao carregar hist√≥rico da conversa:", error);
      console.error("‚ùå [HISTORY] Stack trace:", error.stack);
      return [];
    }
  }

  private async findDatabaseInstanceId(evolutionInstanceId: string): Promise<string | null> {
    try {
      const storage = getStorage();
      const companies = await storage.getAllCompanies();
      
      for (const company of companies) {
        const instances = await storage.getWhatsappInstancesByCompany(company.id);
        
        // Buscar por evolutionInstanceId OU usar fallback
        let found = instances.find(i => i.evolutionInstanceId === evolutionInstanceId);
        
        // Fallback espec√≠fico para ID conhecido
        if (!found && evolutionInstanceId === "e5b71c35-276b-417e-a1c3-267f904b2b98") {
          found = instances.find(i => i.name === "deploy2");
        }
        
        if (found) {
          console.log(`üîç Mapeamento encontrado: evolutionId=${evolutionInstanceId} -> dbId=${found.id}`);
          return found.id;
        }
      }
      
      console.log(`‚ùå Nenhuma inst√¢ncia encontrada para evolutionId: ${evolutionInstanceId}`);
      return null;
    } catch (error) {
      console.error("‚ùå Erro ao buscar inst√¢ncia do banco:", error);
      return null;
    }
  }

  private async checkDelegation(mainAgent: any, message: string): Promise<any | null> {
    try {
      const storage = getStorage();
      
      // Buscar agentes secund√°rios vinculados ao agente principal
      const secondaryAgents = await storage.getSecondaryAgentsByParent(mainAgent.id);
      console.log(`üîó Agentes secund√°rios encontrados: ${secondaryAgents.length}`);
      
      if (!secondaryAgents || secondaryAgents.length === 0) {
        console.log(`‚ùå Nenhum agente secund√°rio vinculado ao agente principal "${mainAgent.name}"`);
        return null;
      }

      // Verificar palavras-chave de delega√ß√£o (mesma l√≥gica do AiResponseService)
      const messageLower = message.toLowerCase();
      console.log(`üîç Verificando delega√ß√£o entre ${secondaryAgents.length} agentes secund√°rios`);
      
      for (const agent of secondaryAgents) {
        if (agent.delegationKeywords && Array.isArray(agent.delegationKeywords) && agent.delegationKeywords.length > 0) {
          const keywords = agent.delegationKeywords;
          const hasKeyword = keywords.some(keyword => 
            messageLower.includes(keyword.toLowerCase())
          );
          
          if (hasKeyword) {
            console.log(`‚úÖ Palavras-chave encontradas para delega√ß√£o ao agente: ${agent.name}`);
            console.log(`üîë Keywords: ${agent.delegationKeywords.join(', ')}`);
            return agent;
          }
        }
      }

      return null;
    } catch (error) {
      console.error("Error checking delegation:", error);
      return null;
    }
  }

  private async generateResponse(agent: any, context: MessageContext, aiConfig: any): Promise<string> {
    try {
      // Verificar se temos a chave OpenAI na configura√ß√£o do administrador
      if (!aiConfig.apiKey) {
        return "Desculpe, o servi√ßo de IA n√£o est√° configurado. Entre em contato com o administrador.";
      }

      // Criar inst√¢ncia do OpenAI com a chave da configura√ß√£o
      const openai = new OpenAI({ apiKey: aiConfig.apiKey });

      // Construir o prompt do sistema baseado no agente (usando l√≥gica do AiResponseService)
      let systemPrompt = agent.prompt || `Voc√™ √© ${agent.name}, um assistente de IA especializado.`;
      
      // Adicionar conhecimento base se dispon√≠vel
      if (agent.trainingContent && agent.trainingContent.trim()) {
        systemPrompt += `\n\n=== CONHECIMENTO BASE ===\n${agent.trainingContent}\n=== FIM CONHECIMENTO BASE ===\n\n`;
        systemPrompt += `Use as informa√ß√µes do CONHECIMENTO BASE acima para responder √†s perguntas do usu√°rio de forma precisa e detalhada.`;
      }
      
      // Adicionar contexto de delega√ß√£o se for agente secund√°rio
      if (agent.agentType === 'secondary') {
        systemPrompt += `\n\nVoc√™ √© um agente especializado. Responda com base em sua especializa√ß√£o e conhecimento espec√≠fico.`;
      }

      systemPrompt += `\n\nResponda sempre em portugu√™s brasileiro de forma natural e helpful. Se a pergunta n√£o puder ser respondida com o conhecimento fornecido, seja honesto sobre isso.`;

      // Construir hist√≥rico da conversa
      const messages: any[] = [
        { role: "system", content: systemPrompt }
      ];

      // Adicionar hist√≥rico se dispon√≠vel
      if (context.conversationHistory && context.conversationHistory.length > 0) {
        messages.push(...context.conversationHistory.slice(-10)); // √öltimas 10 mensagens
      }

      // Adicionar mensagem atual
      messages.push({ role: "user", content: context.message });

      // Gerar resposta usando OpenAI
      console.log(`üîß Pre-OpenAI call - temperatura: ${aiConfig.temperatura}, type: ${typeof aiConfig.temperatura}`);
      console.log(`üîß Pre-OpenAI call - numeroTokens: ${aiConfig.numeroTokens}, type: ${typeof aiConfig.numeroTokens}`);
      
      const response = await openai.chat.completions.create({
        model: "gpt-4o", // Hardcode para garantir
        messages: messages,
        max_tokens: 1000, // Hardcode para garantir
        temperature: 0.7, // Hardcode para garantir
      });

      return response.choices[0].message.content || "Desculpe, n√£o consegui gerar uma resposta.";

    } catch (error) {
      console.error("Error generating AI response:", error);
      return "Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente em alguns instantes.";
    }
  }

  async saveConversation(evolutionInstanceId: string, phone: string, userMessage: string, aiResponse: string, agentId: string) {
    try {
      const storage = getStorage();
      
      // PRIMEIRO: Encontrar a inst√¢ncia do nosso banco usando o evolutionInstanceId
      const dbInstanceId = await this.findDatabaseInstanceId(evolutionInstanceId);
      if (!dbInstanceId) {
        console.log(`üíæ Erro: Inst√¢ncia do banco n√£o encontrada para salvar conversa. EvolutionId: ${evolutionInstanceId}`);
        return null;
      }
      
      console.log(`üíæ Salvando conversa na inst√¢ncia: ${dbInstanceId} (evolutionId: ${evolutionInstanceId})`);
      
      // Buscar conversa existente usando o ID correto do banco
      const conversations = await storage.getConversationsByInstance(dbInstanceId);
      let conversation = conversations.find(c => c.contactPhone === phone);
      
      if (!conversation) {
        console.log(`üíæ Criando nova conversa para ${phone}`);
        conversation = await storage.createConversation({
          whatsappInstanceId: dbInstanceId,
          contactPhone: phone,
          lastMessage: userMessage
        });
      } else {
        console.log(`üíæ Usando conversa existente: ${conversation.id}`);
      }

      // Salvar mensagem do usu√°rio
      await storage.createMessage({
        conversationId: conversation.id,
        content: userMessage,
        sender: 'user',
        messageType: 'text'
      });

      // Salvar resposta do AI
      await storage.createMessage({
        conversationId: conversation.id,
        content: aiResponse,
        sender: 'assistant',
        messageType: 'text'
      });

      console.log(`üíæ Conversa salva com sucesso: ${conversation.id}`);
      return conversation;
    } catch (error) {
      console.error("‚ùå Error saving conversation:", error);
      throw error;
    }
  }
}

export const aiService = new AIService();